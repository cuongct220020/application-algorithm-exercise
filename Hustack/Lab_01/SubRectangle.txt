/* Expected Approach - O(n) time and O(n) space

    This idea is based on the naive approach. Inseated of linearly finding previous smaller and previous smaller for every element, we fine previous smaller and next smaller for the whole array in liner time. 

    1. Build an array prevS[] in O(n) time using stack that holds index of previous smaller element for every item. 
    
    2. Build another array nextS[] in O(n) time using stack that holds index of next smaller element for every item.

    3. Now do following for every element hist[i]. Consider hist[i] find width of the largest histogram with hist[i] being the smallest height. 
            width = nextS[i] - prevS[i] - 1;
    Now find the area as
                area = hist[i] * width;
*/

/* Further Optimized (The best approach) - O(n) time and O(n) space

    When we compute next smaller element, we pop an item from the stack and mark current item as next smaller of it. One important observation here is the item below every item in stack is the previous smaller element. So we do not need to explicitly compute previous smaller. 

Below are teh detailed steps of implementation. 
    1. Create an empty stack
    2. Start form the first bar, and do the following for every bar hist[i] where i varies from 0 to n - 1
        1. if the stack if empty or hist[i] is higher than the bar at top of the stack, then push i to stack. 
        2. if this bar is smaller than the top of the stack, then keep removing the top of the stack while the top of the stack is greater. 
        3. Let the removed bar be hist[tp]. Caculate the area of the rectangle with hist[tp] as teh smallest bar. 
        4. For hist[tp], the "left index" is previous (previous to tp item) in stack and "right index" is "i"

    3. If the stack is not empty, then one by one remove all bars from the stack and do step (2.2 and 2.3) for every removed bar. 

*/


/* 
1. Stack và các cột còn lại sau khi duyệt xong
        Khi duyệt qua các cột, stack lưu các chỉ số của cột trong biểu đồ mà vẫn chưa được xử lý để tính diện tích hình chữ nhật. Stack này được duy trì để đảm bảo rằng các cột trong stack luôn có chiều cao tăng dần (hoặc bằng nhau)

        Sau khi duyệt hết các cột, nếu trong stack vẫn còn các phần tử, điều này có nghĩa là các cột này không có cột nhỏ hơn nằm ở phía bên phải. Vì vậy, ta sẽ phải tính diện tích cho những cột này, giả sử rằng chiều dài của các hình chữ nhật được mở rộng đến hết toàn bộ phần còn lại của biểu đồ. 
2. Ý nghĩa của previous smaller và next smaller
        Previous smaller: là cột đầu tiên bên trái của một cột mà có chiều cao nhỏ hơn chiều cao của cột hiện tại. 

        Next smaller: là cột đầu tiên bên phải của một cột mà có chiều cao nhỏ hơn chiều cao của cột hiện tại. 
*/
















